/*
 * generated by Xtext 2.27.0
 */
package de.fraunhofer.ipa.deployment.generator

import com.google.inject.Inject
import de.fraunhofer.ipa.deployment.deployModel.CISetting
import de.fraunhofer.ipa.deployment.deployModel.MonolithicImplementationDescription
import de.fraunhofer.ipa.deployment.deployModel.PackageDescription
import de.fraunhofer.ipa.deployment.utils.DeployModelUtils
import de.fraunhofer.ipa.deployment.validation.CommonRules
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import java.util.stream.Collector
import java.util.stream.Collectors

/**
 * Generates code from your model files on save.
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class DeployModelGenerator extends AbstractGenerator {

	@Inject
	extension GitLabCICompiler
	
	override
	void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		var monolithicImpls = resource.allContents.toIterable.filter(MonolithicImplementationDescription)
		var packageDess = resource.allContents.toIterable.filter(PackageDescription)
		var ciSettings = resource.allContents.toIterable.filter(CISetting)
		
    for (monolithicImpl : monolithicImpls) {
			System.out.println(String.format("monolithicImpl name: %s", monolithicImpl.getName()))  
			var repoNames = newArrayList()
			for(ciSetting: ciSettings){
				// check if there is CI for this monolithicImpl
				var flagPackDes = false
				for(repo: ciSetting.appliedRepos.values){
					repoNames.add(repo.getName)
					}
				System.out.println(repoNames)
    		if(repoNames.contains(monolithicImpl.getName())){
    			// 	check if there is packageDes for this monolithicImpl
    			for(packageDes : packageDess){
    				System.out.println(packageDes.imageDescription.name.name)
    				if(packageDes.imageDescription.name.name.equals(monolithicImpl.getName())){
    					System.out.print("Find Pkg for")
    					System.out.println(packageDes.imageDescription.name)
							flagPackDes = true
							//	generate gitlab CI
							if(ciSetting.ciTypes.values.contains(DeployModelUtils.camelToLowerUnderscore(CommonRules.RepoTypes.Gitlab.name))){
									System.out.println(String.format("Generate CI for gitlab with pkg"))
	    						fsa.generateFile(String.format("%s/%s.gitlab-ci.yml", monolithicImpl.getName(),monolithicImpl.getName()),
	    							monolithicImpl.compileGitlabCI(packageDes, ciSetting))
  							}
							if(ciSetting.ciTypes.values.contains(DeployModelUtils.camelToLowerUnderscore(CommonRules.RepoTypes.Github.name))){
									System.out.println(String.format("Generate CI for github with pkg"))
  							}
							}
						}
						if(flagPackDes==false){
							System.out.println(String.format("Generate CI  without pkg"))
							}
						}
					}
    		}
		}
	
}


