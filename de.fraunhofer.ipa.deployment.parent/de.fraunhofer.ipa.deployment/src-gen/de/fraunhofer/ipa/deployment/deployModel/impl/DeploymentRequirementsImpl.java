/**
 * generated by Xtext 2.27.0
 */
package de.fraunhofer.ipa.deployment.deployModel.impl;

import de.fraunhofer.ipa.deployment.deployModel.DeployModelPackage;
import de.fraunhofer.ipa.deployment.deployModel.DeploymentRequirements;
import de.fraunhofer.ipa.deployment.deployModel.ReqOperatingSystem;
import de.fraunhofer.ipa.deployment.deployModel.ReqProcessorArchitecture;
import de.fraunhofer.ipa.deployment.deployModel.ReqRosDistro;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Deployment Requirements</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link de.fraunhofer.ipa.deployment.deployModel.impl.DeploymentRequirementsImpl#getName <em>Name</em>}</li>
 *   <li>{@link de.fraunhofer.ipa.deployment.deployModel.impl.DeploymentRequirementsImpl#getOperatingSystem <em>Operating System</em>}</li>
 *   <li>{@link de.fraunhofer.ipa.deployment.deployModel.impl.DeploymentRequirementsImpl#getProcessorArchitecture <em>Processor Architecture</em>}</li>
 *   <li>{@link de.fraunhofer.ipa.deployment.deployModel.impl.DeploymentRequirementsImpl#getRosDistro <em>Ros Distro</em>}</li>
 * </ul>
 *
 * @generated
 */
public class DeploymentRequirementsImpl extends MinimalEObjectImpl.Container implements DeploymentRequirements
{
  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getOperatingSystem() <em>Operating System</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOperatingSystem()
   * @generated
   * @ordered
   */
  protected ReqOperatingSystem operatingSystem;

  /**
   * The cached value of the '{@link #getProcessorArchitecture() <em>Processor Architecture</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getProcessorArchitecture()
   * @generated
   * @ordered
   */
  protected ReqProcessorArchitecture processorArchitecture;

  /**
   * The cached value of the '{@link #getRosDistro() <em>Ros Distro</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRosDistro()
   * @generated
   * @ordered
   */
  protected ReqRosDistro rosDistro;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected DeploymentRequirementsImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return DeployModelPackage.Literals.DEPLOYMENT_REQUIREMENTS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DeployModelPackage.DEPLOYMENT_REQUIREMENTS__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ReqOperatingSystem getOperatingSystem()
  {
    return operatingSystem;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetOperatingSystem(ReqOperatingSystem newOperatingSystem, NotificationChain msgs)
  {
    ReqOperatingSystem oldOperatingSystem = operatingSystem;
    operatingSystem = newOperatingSystem;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, DeployModelPackage.DEPLOYMENT_REQUIREMENTS__OPERATING_SYSTEM, oldOperatingSystem, newOperatingSystem);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setOperatingSystem(ReqOperatingSystem newOperatingSystem)
  {
    if (newOperatingSystem != operatingSystem)
    {
      NotificationChain msgs = null;
      if (operatingSystem != null)
        msgs = ((InternalEObject)operatingSystem).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - DeployModelPackage.DEPLOYMENT_REQUIREMENTS__OPERATING_SYSTEM, null, msgs);
      if (newOperatingSystem != null)
        msgs = ((InternalEObject)newOperatingSystem).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - DeployModelPackage.DEPLOYMENT_REQUIREMENTS__OPERATING_SYSTEM, null, msgs);
      msgs = basicSetOperatingSystem(newOperatingSystem, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DeployModelPackage.DEPLOYMENT_REQUIREMENTS__OPERATING_SYSTEM, newOperatingSystem, newOperatingSystem));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ReqProcessorArchitecture getProcessorArchitecture()
  {
    return processorArchitecture;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetProcessorArchitecture(ReqProcessorArchitecture newProcessorArchitecture, NotificationChain msgs)
  {
    ReqProcessorArchitecture oldProcessorArchitecture = processorArchitecture;
    processorArchitecture = newProcessorArchitecture;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, DeployModelPackage.DEPLOYMENT_REQUIREMENTS__PROCESSOR_ARCHITECTURE, oldProcessorArchitecture, newProcessorArchitecture);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setProcessorArchitecture(ReqProcessorArchitecture newProcessorArchitecture)
  {
    if (newProcessorArchitecture != processorArchitecture)
    {
      NotificationChain msgs = null;
      if (processorArchitecture != null)
        msgs = ((InternalEObject)processorArchitecture).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - DeployModelPackage.DEPLOYMENT_REQUIREMENTS__PROCESSOR_ARCHITECTURE, null, msgs);
      if (newProcessorArchitecture != null)
        msgs = ((InternalEObject)newProcessorArchitecture).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - DeployModelPackage.DEPLOYMENT_REQUIREMENTS__PROCESSOR_ARCHITECTURE, null, msgs);
      msgs = basicSetProcessorArchitecture(newProcessorArchitecture, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DeployModelPackage.DEPLOYMENT_REQUIREMENTS__PROCESSOR_ARCHITECTURE, newProcessorArchitecture, newProcessorArchitecture));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ReqRosDistro getRosDistro()
  {
    return rosDistro;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetRosDistro(ReqRosDistro newRosDistro, NotificationChain msgs)
  {
    ReqRosDistro oldRosDistro = rosDistro;
    rosDistro = newRosDistro;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, DeployModelPackage.DEPLOYMENT_REQUIREMENTS__ROS_DISTRO, oldRosDistro, newRosDistro);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setRosDistro(ReqRosDistro newRosDistro)
  {
    if (newRosDistro != rosDistro)
    {
      NotificationChain msgs = null;
      if (rosDistro != null)
        msgs = ((InternalEObject)rosDistro).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - DeployModelPackage.DEPLOYMENT_REQUIREMENTS__ROS_DISTRO, null, msgs);
      if (newRosDistro != null)
        msgs = ((InternalEObject)newRosDistro).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - DeployModelPackage.DEPLOYMENT_REQUIREMENTS__ROS_DISTRO, null, msgs);
      msgs = basicSetRosDistro(newRosDistro, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DeployModelPackage.DEPLOYMENT_REQUIREMENTS__ROS_DISTRO, newRosDistro, newRosDistro));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case DeployModelPackage.DEPLOYMENT_REQUIREMENTS__OPERATING_SYSTEM:
        return basicSetOperatingSystem(null, msgs);
      case DeployModelPackage.DEPLOYMENT_REQUIREMENTS__PROCESSOR_ARCHITECTURE:
        return basicSetProcessorArchitecture(null, msgs);
      case DeployModelPackage.DEPLOYMENT_REQUIREMENTS__ROS_DISTRO:
        return basicSetRosDistro(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case DeployModelPackage.DEPLOYMENT_REQUIREMENTS__NAME:
        return getName();
      case DeployModelPackage.DEPLOYMENT_REQUIREMENTS__OPERATING_SYSTEM:
        return getOperatingSystem();
      case DeployModelPackage.DEPLOYMENT_REQUIREMENTS__PROCESSOR_ARCHITECTURE:
        return getProcessorArchitecture();
      case DeployModelPackage.DEPLOYMENT_REQUIREMENTS__ROS_DISTRO:
        return getRosDistro();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case DeployModelPackage.DEPLOYMENT_REQUIREMENTS__NAME:
        setName((String)newValue);
        return;
      case DeployModelPackage.DEPLOYMENT_REQUIREMENTS__OPERATING_SYSTEM:
        setOperatingSystem((ReqOperatingSystem)newValue);
        return;
      case DeployModelPackage.DEPLOYMENT_REQUIREMENTS__PROCESSOR_ARCHITECTURE:
        setProcessorArchitecture((ReqProcessorArchitecture)newValue);
        return;
      case DeployModelPackage.DEPLOYMENT_REQUIREMENTS__ROS_DISTRO:
        setRosDistro((ReqRosDistro)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case DeployModelPackage.DEPLOYMENT_REQUIREMENTS__NAME:
        setName(NAME_EDEFAULT);
        return;
      case DeployModelPackage.DEPLOYMENT_REQUIREMENTS__OPERATING_SYSTEM:
        setOperatingSystem((ReqOperatingSystem)null);
        return;
      case DeployModelPackage.DEPLOYMENT_REQUIREMENTS__PROCESSOR_ARCHITECTURE:
        setProcessorArchitecture((ReqProcessorArchitecture)null);
        return;
      case DeployModelPackage.DEPLOYMENT_REQUIREMENTS__ROS_DISTRO:
        setRosDistro((ReqRosDistro)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case DeployModelPackage.DEPLOYMENT_REQUIREMENTS__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case DeployModelPackage.DEPLOYMENT_REQUIREMENTS__OPERATING_SYSTEM:
        return operatingSystem != null;
      case DeployModelPackage.DEPLOYMENT_REQUIREMENTS__PROCESSOR_ARCHITECTURE:
        return processorArchitecture != null;
      case DeployModelPackage.DEPLOYMENT_REQUIREMENTS__ROS_DISTRO:
        return rosDistro != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(')');
    return result.toString();
  }

} //DeploymentRequirementsImpl
