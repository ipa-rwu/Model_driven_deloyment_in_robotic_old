/**
 * generated by Xtext 2.27.0
 */
package de.fraunhofer.ipa.deployment.deployModel.util;

import de.fraunhofer.ipa.deployment.deployModel.*;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.util.Switch;

/**
 * <!-- begin-user-doc -->
 * The <b>Switch</b> for the model's inheritance hierarchy.
 * It supports the call {@link #doSwitch(EObject) doSwitch(object)}
 * to invoke the <code>caseXXX</code> method for each class of the model,
 * starting with the actual class of the object
 * and proceeding up the inheritance hierarchy
 * until a non-null result is returned,
 * which is the result of the switch.
 * <!-- end-user-doc -->
 * @see de.fraunhofer.ipa.deployment.deployModel.DeployModelPackage
 * @generated
 */
public class DeployModelSwitch<T> extends Switch<T>
{
  /**
   * The cached model package
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static DeployModelPackage modelPackage;

  /**
   * Creates an instance of the switch.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DeployModelSwitch()
  {
    if (modelPackage == null)
    {
      modelPackage = DeployModelPackage.eINSTANCE;
    }
  }

  /**
   * Checks whether this is a switch for the given package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param ePackage the package in question.
   * @return whether this is a switch for the given package.
   * @generated
   */
  @Override
  protected boolean isSwitchFor(EPackage ePackage)
  {
    return ePackage == modelPackage;
  }

  /**
   * Calls <code>caseXXX</code> for each class of the model until one returns a non null result; it yields that result.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the first non-null result returned by a <code>caseXXX</code> call.
   * @generated
   */
  @Override
  protected T doSwitch(int classifierID, EObject theEObject)
  {
    switch (classifierID)
    {
      case DeployModelPackage.YAML:
      {
        Yaml yaml = (Yaml)theEObject;
        T result = caseYaml(yaml);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DeployModelPackage.YAML_CONTENT:
      {
        YamlContent yamlContent = (YamlContent)theEObject;
        T result = caseYamlContent(yamlContent);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DeployModelPackage.MONOLITHIC_IMPLEMENTATION_DESCRIPTION:
      {
        MonolithicImplementationDescription monolithicImplementationDescription = (MonolithicImplementationDescription)theEObject;
        T result = caseMonolithicImplementationDescription(monolithicImplementationDescription);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DeployModelPackage.NEW_IMPLEMENTATION_ARTIFACT:
      {
        NewImplementationArtifact newImplementationArtifact = (NewImplementationArtifact)theEObject;
        T result = caseNewImplementationArtifact(newImplementationArtifact);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DeployModelPackage.IMPLEMENTATION_ARTIFACT_DESCRIPTION:
      {
        ImplementationArtifactDescription implementationArtifactDescription = (ImplementationArtifactDescription)theEObject;
        T result = caseImplementationArtifactDescription(implementationArtifactDescription);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DeployModelPackage.REUSE_IMPLEMENTATION_ARTIFACT:
      {
        ReuseImplementationArtifact reuseImplementationArtifact = (ReuseImplementationArtifact)theEObject;
        T result = caseReuseImplementationArtifact(reuseImplementationArtifact);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DeployModelPackage.IMPLEMENTATION_ARTIFACT_ABSTRACT:
      {
        ImplementationArtifactAbstract implementationArtifactAbstract = (ImplementationArtifactAbstract)theEObject;
        T result = caseImplementationArtifactAbstract(implementationArtifactAbstract);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DeployModelPackage.DEPLOYMENT_REQUIREMENTS:
      {
        DeploymentRequirements deploymentRequirements = (DeploymentRequirements)theEObject;
        T result = caseDeploymentRequirements(deploymentRequirements);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DeployModelPackage.RESOURCE_REQUIREMENTS:
      {
        ResourceRequirements resourceRequirements = (ResourceRequirements)theEObject;
        T result = caseResourceRequirements(resourceRequirements);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DeployModelPackage.RESOURCE_REQUIREMENT:
      {
        ResourceRequirement resourceRequirement = (ResourceRequirement)theEObject;
        T result = caseResourceRequirement(resourceRequirement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DeployModelPackage.REQ_OPERATING_SYSTEM:
      {
        ReqOperatingSystem reqOperatingSystem = (ReqOperatingSystem)theEObject;
        T result = caseReqOperatingSystem(reqOperatingSystem);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DeployModelPackage.OPERATING_SYSTEM_TYPE_LIST:
      {
        OperatingSystemTypeList operatingSystemTypeList = (OperatingSystemTypeList)theEObject;
        T result = caseOperatingSystemTypeList(operatingSystemTypeList);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DeployModelPackage.REQ_PROCESSOR_ARCHITECTURE:
      {
        ReqProcessorArchitecture reqProcessorArchitecture = (ReqProcessorArchitecture)theEObject;
        T result = caseReqProcessorArchitecture(reqProcessorArchitecture);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DeployModelPackage.PROCESSOR_ARCHITECTURE_TYPE_LIST:
      {
        ProcessorArchitectureTypeList processorArchitectureTypeList = (ProcessorArchitectureTypeList)theEObject;
        T result = caseProcessorArchitectureTypeList(processorArchitectureTypeList);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DeployModelPackage.REQ_ROS_DISTRO:
      {
        ReqRosDistro reqRosDistro = (ReqRosDistro)theEObject;
        T result = caseReqRosDistro(reqRosDistro);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DeployModelPackage.ROS_DISTRO_LIST:
      {
        RosDistroList rosDistroList = (RosDistroList)theEObject;
        T result = caseRosDistroList(rosDistroList);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DeployModelPackage.BUILD_REQUIREMENTS:
      {
        BuildRequirements buildRequirements = (BuildRequirements)theEObject;
        T result = caseBuildRequirements(buildRequirements);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DeployModelPackage.REQ_BUILD_DEPENDENCIES:
      {
        ReqBuildDependencies reqBuildDependencies = (ReqBuildDependencies)theEObject;
        T result = caseReqBuildDependencies(reqBuildDependencies);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DeployModelPackage.DEPENDENCY:
      {
        Dependency dependency = (Dependency)theEObject;
        T result = caseDependency(dependency);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DeployModelPackage.LOCAL_PACKAGE:
      {
        LocalPackage localPackage = (LocalPackage)theEObject;
        T result = caseLocalPackage(localPackage);
        if (result == null) result = caseDependency(localPackage);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DeployModelPackage.GIT_PACKAGE:
      {
        GitPackage gitPackage = (GitPackage)theEObject;
        T result = caseGitPackage(gitPackage);
        if (result == null) result = caseDependency(gitPackage);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DeployModelPackage.REQ_DEPENDENCY_REPOSITORIES:
      {
        ReqDependencyRepositories reqDependencyRepositories = (ReqDependencyRepositories)theEObject;
        T result = caseReqDependencyRepositories(reqDependencyRepositories);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DeployModelPackage.APT_REPOSITORY_INSTANCE:
      {
        AptRepositoryInstance aptRepositoryInstance = (AptRepositoryInstance)theEObject;
        T result = caseAptRepositoryInstance(aptRepositoryInstance);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DeployModelPackage.START_COMMANDS:
      {
        StartCommands startCommands = (StartCommands)theEObject;
        T result = caseStartCommands(startCommands);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DeployModelPackage.LIST_START_COMMANDS:
      {
        ListStartCommands listStartCommands = (ListStartCommands)theEObject;
        T result = caseListStartCommands(listStartCommands);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DeployModelPackage.STACK_IMPLEMENTATION_DESCRIPTION:
      {
        StackImplementationDescription stackImplementationDescription = (StackImplementationDescription)theEObject;
        T result = caseStackImplementationDescription(stackImplementationDescription);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DeployModelPackage.PACKAGE_DESCRIPTION:
      {
        PackageDescription packageDescription = (PackageDescription)theEObject;
        T result = casePackageDescription(packageDescription);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DeployModelPackage.IMAGE_DESCRIPTION:
      {
        ImageDescription imageDescription = (ImageDescription)theEObject;
        T result = caseImageDescription(imageDescription);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DeployModelPackage.IMAGE_TYPE_LIST:
      {
        ImageTypeList imageTypeList = (ImageTypeList)theEObject;
        T result = caseImageTypeList(imageTypeList);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DeployModelPackage.IMAGE_VERSION_LIST:
      {
        ImageVersionList imageVersionList = (ImageVersionList)theEObject;
        T result = caseImageVersionList(imageVersionList);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DeployModelPackage.REPOSITORY_DESCRIPTION:
      {
        RepositoryDescription repositoryDescription = (RepositoryDescription)theEObject;
        T result = caseRepositoryDescription(repositoryDescription);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DeployModelPackage.REPOSITORY_SPEC:
      {
        RepositorySpec repositorySpec = (RepositorySpec)theEObject;
        T result = caseRepositorySpec(repositorySpec);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DeployModelPackage.REPOSITORY:
      {
        Repository repository = (Repository)theEObject;
        T result = caseRepository(repository);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      default: return defaultCase(theEObject);
    }
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Yaml</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Yaml</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseYaml(Yaml object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Yaml Content</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Yaml Content</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseYamlContent(YamlContent object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Monolithic Implementation Description</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Monolithic Implementation Description</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMonolithicImplementationDescription(MonolithicImplementationDescription object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>New Implementation Artifact</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>New Implementation Artifact</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNewImplementationArtifact(NewImplementationArtifact object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Implementation Artifact Description</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Implementation Artifact Description</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseImplementationArtifactDescription(ImplementationArtifactDescription object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Reuse Implementation Artifact</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Reuse Implementation Artifact</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseReuseImplementationArtifact(ReuseImplementationArtifact object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Implementation Artifact Abstract</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Implementation Artifact Abstract</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseImplementationArtifactAbstract(ImplementationArtifactAbstract object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Deployment Requirements</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Deployment Requirements</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDeploymentRequirements(DeploymentRequirements object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Resource Requirements</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Resource Requirements</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseResourceRequirements(ResourceRequirements object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Resource Requirement</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Resource Requirement</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseResourceRequirement(ResourceRequirement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Req Operating System</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Req Operating System</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseReqOperatingSystem(ReqOperatingSystem object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Operating System Type List</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Operating System Type List</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOperatingSystemTypeList(OperatingSystemTypeList object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Req Processor Architecture</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Req Processor Architecture</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseReqProcessorArchitecture(ReqProcessorArchitecture object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Processor Architecture Type List</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Processor Architecture Type List</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseProcessorArchitectureTypeList(ProcessorArchitectureTypeList object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Req Ros Distro</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Req Ros Distro</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseReqRosDistro(ReqRosDistro object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Ros Distro List</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Ros Distro List</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRosDistroList(RosDistroList object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Build Requirements</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Build Requirements</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBuildRequirements(BuildRequirements object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Req Build Dependencies</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Req Build Dependencies</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseReqBuildDependencies(ReqBuildDependencies object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Dependency</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Dependency</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDependency(Dependency object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Local Package</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Local Package</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLocalPackage(LocalPackage object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Git Package</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Git Package</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseGitPackage(GitPackage object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Req Dependency Repositories</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Req Dependency Repositories</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseReqDependencyRepositories(ReqDependencyRepositories object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Apt Repository Instance</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Apt Repository Instance</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAptRepositoryInstance(AptRepositoryInstance object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Start Commands</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Start Commands</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseStartCommands(StartCommands object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>List Start Commands</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>List Start Commands</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseListStartCommands(ListStartCommands object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Stack Implementation Description</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Stack Implementation Description</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseStackImplementationDescription(StackImplementationDescription object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Package Description</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Package Description</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePackageDescription(PackageDescription object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Image Description</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Image Description</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseImageDescription(ImageDescription object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Image Type List</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Image Type List</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseImageTypeList(ImageTypeList object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Image Version List</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Image Version List</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseImageVersionList(ImageVersionList object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Repository Description</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Repository Description</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRepositoryDescription(RepositoryDescription object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Repository Spec</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Repository Spec</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRepositorySpec(RepositorySpec object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Repository</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Repository</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRepository(Repository object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EObject</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch, but this is the last case anyway.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EObject</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject)
   * @generated
   */
  @Override
  public T defaultCase(EObject object)
  {
    return null;
  }

} //DeployModelSwitch
