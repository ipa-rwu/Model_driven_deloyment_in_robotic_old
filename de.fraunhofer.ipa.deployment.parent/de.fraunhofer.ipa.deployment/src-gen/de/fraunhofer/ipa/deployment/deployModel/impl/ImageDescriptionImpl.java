/**
 * generated by Xtext 2.27.0
 */
package de.fraunhofer.ipa.deployment.deployModel.impl;

import de.fraunhofer.ipa.deployment.deployModel.DeployModelPackage;
import de.fraunhofer.ipa.deployment.deployModel.ImageDescription;
import de.fraunhofer.ipa.deployment.deployModel.ImageTypeList;
import de.fraunhofer.ipa.deployment.deployModel.ImageVersionList;
import de.fraunhofer.ipa.deployment.deployModel.MonolithicImplementationDescription;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Image Description</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link de.fraunhofer.ipa.deployment.deployModel.impl.ImageDescriptionImpl#getTypes <em>Types</em>}</li>
 *   <li>{@link de.fraunhofer.ipa.deployment.deployModel.impl.ImageDescriptionImpl#getName <em>Name</em>}</li>
 *   <li>{@link de.fraunhofer.ipa.deployment.deployModel.impl.ImageDescriptionImpl#getImageVersions <em>Image Versions</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ImageDescriptionImpl extends MinimalEObjectImpl.Container implements ImageDescription
{
  /**
   * The cached value of the '{@link #getTypes() <em>Types</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTypes()
   * @generated
   * @ordered
   */
  protected EList<ImageTypeList> types;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected MonolithicImplementationDescription name;

  /**
   * The cached value of the '{@link #getImageVersions() <em>Image Versions</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getImageVersions()
   * @generated
   * @ordered
   */
  protected ImageVersionList imageVersions;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ImageDescriptionImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return DeployModelPackage.Literals.IMAGE_DESCRIPTION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<ImageTypeList> getTypes()
  {
    if (types == null)
    {
      types = new EObjectContainmentEList<ImageTypeList>(ImageTypeList.class, this, DeployModelPackage.IMAGE_DESCRIPTION__TYPES);
    }
    return types;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MonolithicImplementationDescription getName()
  {
    if (name != null && name.eIsProxy())
    {
      InternalEObject oldName = (InternalEObject)name;
      name = (MonolithicImplementationDescription)eResolveProxy(oldName);
      if (name != oldName)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, DeployModelPackage.IMAGE_DESCRIPTION__NAME, oldName, name));
      }
    }
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MonolithicImplementationDescription basicGetName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setName(MonolithicImplementationDescription newName)
  {
    MonolithicImplementationDescription oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DeployModelPackage.IMAGE_DESCRIPTION__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ImageVersionList getImageVersions()
  {
    return imageVersions;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetImageVersions(ImageVersionList newImageVersions, NotificationChain msgs)
  {
    ImageVersionList oldImageVersions = imageVersions;
    imageVersions = newImageVersions;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, DeployModelPackage.IMAGE_DESCRIPTION__IMAGE_VERSIONS, oldImageVersions, newImageVersions);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setImageVersions(ImageVersionList newImageVersions)
  {
    if (newImageVersions != imageVersions)
    {
      NotificationChain msgs = null;
      if (imageVersions != null)
        msgs = ((InternalEObject)imageVersions).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - DeployModelPackage.IMAGE_DESCRIPTION__IMAGE_VERSIONS, null, msgs);
      if (newImageVersions != null)
        msgs = ((InternalEObject)newImageVersions).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - DeployModelPackage.IMAGE_DESCRIPTION__IMAGE_VERSIONS, null, msgs);
      msgs = basicSetImageVersions(newImageVersions, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DeployModelPackage.IMAGE_DESCRIPTION__IMAGE_VERSIONS, newImageVersions, newImageVersions));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case DeployModelPackage.IMAGE_DESCRIPTION__TYPES:
        return ((InternalEList<?>)getTypes()).basicRemove(otherEnd, msgs);
      case DeployModelPackage.IMAGE_DESCRIPTION__IMAGE_VERSIONS:
        return basicSetImageVersions(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case DeployModelPackage.IMAGE_DESCRIPTION__TYPES:
        return getTypes();
      case DeployModelPackage.IMAGE_DESCRIPTION__NAME:
        if (resolve) return getName();
        return basicGetName();
      case DeployModelPackage.IMAGE_DESCRIPTION__IMAGE_VERSIONS:
        return getImageVersions();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case DeployModelPackage.IMAGE_DESCRIPTION__TYPES:
        getTypes().clear();
        getTypes().addAll((Collection<? extends ImageTypeList>)newValue);
        return;
      case DeployModelPackage.IMAGE_DESCRIPTION__NAME:
        setName((MonolithicImplementationDescription)newValue);
        return;
      case DeployModelPackage.IMAGE_DESCRIPTION__IMAGE_VERSIONS:
        setImageVersions((ImageVersionList)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case DeployModelPackage.IMAGE_DESCRIPTION__TYPES:
        getTypes().clear();
        return;
      case DeployModelPackage.IMAGE_DESCRIPTION__NAME:
        setName((MonolithicImplementationDescription)null);
        return;
      case DeployModelPackage.IMAGE_DESCRIPTION__IMAGE_VERSIONS:
        setImageVersions((ImageVersionList)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case DeployModelPackage.IMAGE_DESCRIPTION__TYPES:
        return types != null && !types.isEmpty();
      case DeployModelPackage.IMAGE_DESCRIPTION__NAME:
        return name != null;
      case DeployModelPackage.IMAGE_DESCRIPTION__IMAGE_VERSIONS:
        return imageVersions != null;
    }
    return super.eIsSet(featureID);
  }

} //ImageDescriptionImpl
