/*
 * generated by Xtext 2.27.0
 */
package de.fraunhofer.ipa.deployment.serializer;

import com.google.inject.Inject;
import de.fraunhofer.ipa.deployment.services.DeployModelGrammarAccess;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;

@SuppressWarnings("all")
public class DeployModelSyntacticSequencer extends AbstractSyntacticSequencer {

	protected DeployModelGrammarAccess grammarAccess;
	protected AbstractElementAlias match_ImageTypeList_CommaKeyword_2_0_q;
	protected AbstractElementAlias match_ImageVersionList_PreListElementParserRuleCall_1_0_q;
	protected AbstractElementAlias match_ListStartCommands_PreListElementParserRuleCall_1_0_q;
	protected AbstractElementAlias match_OperatingSystemTypeList_PreListElementParserRuleCall_1_0_q;
	protected AbstractElementAlias match_ProcessorArchitectureTypeList_PreListElementParserRuleCall_1_0_q;
	protected AbstractElementAlias match_RosDistroList_PreListElementParserRuleCall_1_0_q;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (DeployModelGrammarAccess) access;
		match_ImageTypeList_CommaKeyword_2_0_q = new TokenAlias(false, true, grammarAccess.getImageTypeListAccess().getCommaKeyword_2_0());
		match_ImageVersionList_PreListElementParserRuleCall_1_0_q = new TokenAlias(false, true, grammarAccess.getImageVersionListAccess().getPreListElementParserRuleCall_1_0());
		match_ListStartCommands_PreListElementParserRuleCall_1_0_q = new TokenAlias(false, true, grammarAccess.getListStartCommandsAccess().getPreListElementParserRuleCall_1_0());
		match_OperatingSystemTypeList_PreListElementParserRuleCall_1_0_q = new TokenAlias(false, true, grammarAccess.getOperatingSystemTypeListAccess().getPreListElementParserRuleCall_1_0());
		match_ProcessorArchitectureTypeList_PreListElementParserRuleCall_1_0_q = new TokenAlias(false, true, grammarAccess.getProcessorArchitectureTypeListAccess().getPreListElementParserRuleCall_1_0());
		match_RosDistroList_PreListElementParserRuleCall_1_0_q = new TokenAlias(false, true, grammarAccess.getRosDistroListAccess().getPreListElementParserRuleCall_1_0());
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (ruleCall.getRule() == grammarAccess.getDEDENTRule())
			return getDEDENTToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getINDENTRule())
			return getINDENTToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getPreListElementRule())
			return getPreListElementToken(semanticObject, ruleCall, node);
		return "";
	}
	
	/**
	 * Synthetic terminal rule. The concrete syntax is to be specified by clients.
	 * Defaults to the empty string.
	 */
	protected String getDEDENTToken(EObject semanticObject, RuleCall ruleCall, INode node) { return ""; }
	
	/**
	 * Synthetic terminal rule. The concrete syntax is to be specified by clients.
	 * Defaults to the empty string.
	 */
	protected String getINDENTToken(EObject semanticObject, RuleCall ruleCall, INode node) { return ""; }
	
	/**
	 * PreListElement hidden(SL_COMMENT):
	 *   '-';
	 */
	protected String getPreListElementToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "-";
	}
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_ImageTypeList_CommaKeyword_2_0_q.equals(syntax))
				emit_ImageTypeList_CommaKeyword_2_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ImageVersionList_PreListElementParserRuleCall_1_0_q.equals(syntax))
				emit_ImageVersionList_PreListElementParserRuleCall_1_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ListStartCommands_PreListElementParserRuleCall_1_0_q.equals(syntax))
				emit_ListStartCommands_PreListElementParserRuleCall_1_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_OperatingSystemTypeList_PreListElementParserRuleCall_1_0_q.equals(syntax))
				emit_OperatingSystemTypeList_PreListElementParserRuleCall_1_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ProcessorArchitectureTypeList_PreListElementParserRuleCall_1_0_q.equals(syntax))
				emit_ProcessorArchitectureTypeList_PreListElementParserRuleCall_1_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_RosDistroList_PreListElementParserRuleCall_1_0_q.equals(syntax))
				emit_RosDistroList_PreListElementParserRuleCall_1_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     children+=ImageTypes (ambiguity) ']' (rule end)
	 
	 * </pre>
	 */
	protected void emit_ImageTypeList_CommaKeyword_2_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     PreListElement?
	 *
	 * This ambiguous syntax occurs at:
	 *     children+=ImageVersionTypes (ambiguity) (rule end)
	 
	 * </pre>
	 */
	protected void emit_ImageVersionList_PreListElementParserRuleCall_1_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     PreListElement?
	 *
	 * This ambiguous syntax occurs at:
	 *     children+=STRING (ambiguity) (rule end)
	 
	 * </pre>
	 */
	protected void emit_ListStartCommands_PreListElementParserRuleCall_1_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     PreListElement?
	 *
	 * This ambiguous syntax occurs at:
	 *     children+=OperatingSystemTypes (ambiguity) (rule end)
	 
	 * </pre>
	 */
	protected void emit_OperatingSystemTypeList_PreListElementParserRuleCall_1_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     PreListElement?
	 *
	 * This ambiguous syntax occurs at:
	 *     children+=ProcessorArchitectureTypes (ambiguity) (rule end)
	 
	 * </pre>
	 */
	protected void emit_ProcessorArchitectureTypeList_PreListElementParserRuleCall_1_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     PreListElement?
	 *
	 * This ambiguous syntax occurs at:
	 *     children+=RosDistro (ambiguity) (rule end)
	 
	 * </pre>
	 */
	protected void emit_RosDistroList_PreListElementParserRuleCall_1_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
