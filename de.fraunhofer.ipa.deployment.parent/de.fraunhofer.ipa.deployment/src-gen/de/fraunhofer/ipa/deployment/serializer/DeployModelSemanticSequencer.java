/*
 * generated by Xtext 2.27.0
 */
package de.fraunhofer.ipa.deployment.serializer;

import com.google.inject.Inject;
import de.fraunhofer.ipa.deployment.deployModel.AptRepositoryInstance;
import de.fraunhofer.ipa.deployment.deployModel.BuildRequirements;
import de.fraunhofer.ipa.deployment.deployModel.CIParameters;
import de.fraunhofer.ipa.deployment.deployModel.CISetting;
import de.fraunhofer.ipa.deployment.deployModel.CommonPropertyMultiValue;
import de.fraunhofer.ipa.deployment.deployModel.CommonPropertySingleValue;
import de.fraunhofer.ipa.deployment.deployModel.DeployModelPackage;
import de.fraunhofer.ipa.deployment.deployModel.DeploymentRequirements;
import de.fraunhofer.ipa.deployment.deployModel.GitPackage;
import de.fraunhofer.ipa.deployment.deployModel.GroupedProperties;
import de.fraunhofer.ipa.deployment.deployModel.ImageDescription;
import de.fraunhofer.ipa.deployment.deployModel.ImplementationArtifactAbstract;
import de.fraunhofer.ipa.deployment.deployModel.ImplementationArtifactDescription;
import de.fraunhofer.ipa.deployment.deployModel.LocalPackage;
import de.fraunhofer.ipa.deployment.deployModel.MonolithicImplementationDescription;
import de.fraunhofer.ipa.deployment.deployModel.MultiMonolithicImplementationNameListBracket;
import de.fraunhofer.ipa.deployment.deployModel.MultiMonolithicImplementationNamePreList;
import de.fraunhofer.ipa.deployment.deployModel.MultiValueListBracket;
import de.fraunhofer.ipa.deployment.deployModel.MultiValueListPreList;
import de.fraunhofer.ipa.deployment.deployModel.NewImplementationArtifact;
import de.fraunhofer.ipa.deployment.deployModel.PackageDescription;
import de.fraunhofer.ipa.deployment.deployModel.Repository;
import de.fraunhofer.ipa.deployment.deployModel.RepositoryDescription;
import de.fraunhofer.ipa.deployment.deployModel.RepositorySpec;
import de.fraunhofer.ipa.deployment.deployModel.ReqBuildDependencies;
import de.fraunhofer.ipa.deployment.deployModel.ReqDependencyRepositories;
import de.fraunhofer.ipa.deployment.deployModel.ResourceRequirements;
import de.fraunhofer.ipa.deployment.deployModel.ReuseImplementationArtifact;
import de.fraunhofer.ipa.deployment.deployModel.StackImplementationDescription;
import de.fraunhofer.ipa.deployment.deployModel.Yaml;
import de.fraunhofer.ipa.deployment.deployModel.YamlContent;
import de.fraunhofer.ipa.deployment.services.DeployModelGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class DeployModelSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private DeployModelGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == DeployModelPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case DeployModelPackage.APT_REPOSITORY_INSTANCE:
				sequence_AptRepositoryInstance(context, (AptRepositoryInstance) semanticObject); 
				return; 
			case DeployModelPackage.BUILD_REQUIREMENTS:
				sequence_BuildRequirements(context, (BuildRequirements) semanticObject); 
				return; 
			case DeployModelPackage.CI_PARAMETERS:
				sequence_CIParameters(context, (CIParameters) semanticObject); 
				return; 
			case DeployModelPackage.CI_SETTING:
				sequence_CISetting(context, (CISetting) semanticObject); 
				return; 
			case DeployModelPackage.COMMON_PROPERTY_MULTI_VALUE:
				sequence_CommonPropertyMultiValue(context, (CommonPropertyMultiValue) semanticObject); 
				return; 
			case DeployModelPackage.COMMON_PROPERTY_SINGLE_VALUE:
				sequence_CommonPropertySingleValue(context, (CommonPropertySingleValue) semanticObject); 
				return; 
			case DeployModelPackage.DEPLOYMENT_REQUIREMENTS:
				sequence_DeploymentRequirements(context, (DeploymentRequirements) semanticObject); 
				return; 
			case DeployModelPackage.GIT_PACKAGE:
				sequence_GitPackage(context, (GitPackage) semanticObject); 
				return; 
			case DeployModelPackage.GROUPED_PROPERTIES:
				sequence_GroupedProperties(context, (GroupedProperties) semanticObject); 
				return; 
			case DeployModelPackage.IMAGE_DESCRIPTION:
				sequence_ImageDescription(context, (ImageDescription) semanticObject); 
				return; 
			case DeployModelPackage.IMPLEMENTATION_ARTIFACT_ABSTRACT:
				sequence_ImplementationArtifactAbstract(context, (ImplementationArtifactAbstract) semanticObject); 
				return; 
			case DeployModelPackage.IMPLEMENTATION_ARTIFACT_DESCRIPTION:
				sequence_ImplementationArtifactDescription(context, (ImplementationArtifactDescription) semanticObject); 
				return; 
			case DeployModelPackage.LOCAL_PACKAGE:
				sequence_LocalPackage(context, (LocalPackage) semanticObject); 
				return; 
			case DeployModelPackage.MONOLITHIC_IMPLEMENTATION_DESCRIPTION:
				sequence_MonolithicImplementationDescription(context, (MonolithicImplementationDescription) semanticObject); 
				return; 
			case DeployModelPackage.MULTI_MONOLITHIC_IMPLEMENTATION_NAME_LIST_BRACKET:
				sequence_MultiMonolithicImplementationNameListBracket(context, (MultiMonolithicImplementationNameListBracket) semanticObject); 
				return; 
			case DeployModelPackage.MULTI_MONOLITHIC_IMPLEMENTATION_NAME_PRE_LIST:
				sequence_MultiMonolithicImplementationNamePreList(context, (MultiMonolithicImplementationNamePreList) semanticObject); 
				return; 
			case DeployModelPackage.MULTI_VALUE_LIST_BRACKET:
				sequence_MultiValueListBracket(context, (MultiValueListBracket) semanticObject); 
				return; 
			case DeployModelPackage.MULTI_VALUE_LIST_PRE_LIST:
				sequence_MultiValueListPreList(context, (MultiValueListPreList) semanticObject); 
				return; 
			case DeployModelPackage.NEW_IMPLEMENTATION_ARTIFACT:
				sequence_NewImplementationArtifact(context, (NewImplementationArtifact) semanticObject); 
				return; 
			case DeployModelPackage.PACKAGE_DESCRIPTION:
				sequence_PackageDescription(context, (PackageDescription) semanticObject); 
				return; 
			case DeployModelPackage.REPOSITORY:
				sequence_Repository(context, (Repository) semanticObject); 
				return; 
			case DeployModelPackage.REPOSITORY_DESCRIPTION:
				sequence_RepositoryDescription(context, (RepositoryDescription) semanticObject); 
				return; 
			case DeployModelPackage.REPOSITORY_SPEC:
				sequence_RepositorySpec(context, (RepositorySpec) semanticObject); 
				return; 
			case DeployModelPackage.REQ_BUILD_DEPENDENCIES:
				sequence_ReqBuildDependencies(context, (ReqBuildDependencies) semanticObject); 
				return; 
			case DeployModelPackage.REQ_DEPENDENCY_REPOSITORIES:
				sequence_ReqDependencyRepositories(context, (ReqDependencyRepositories) semanticObject); 
				return; 
			case DeployModelPackage.RESOURCE_REQUIREMENTS:
				sequence_ResourceRequirements(context, (ResourceRequirements) semanticObject); 
				return; 
			case DeployModelPackage.REUSE_IMPLEMENTATION_ARTIFACT:
				sequence_ReuseImplementationArtifact(context, (ReuseImplementationArtifact) semanticObject); 
				return; 
			case DeployModelPackage.STACK_IMPLEMENTATION_DESCRIPTION:
				sequence_StackImplementationDescription(context, (StackImplementationDescription) semanticObject); 
				return; 
			case DeployModelPackage.YAML:
				sequence_Yaml(context, (Yaml) semanticObject); 
				return; 
			case DeployModelPackage.YAML_CONTENT:
				sequence_YamlContent(context, (YamlContent) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     AptRepositoryInstance returns AptRepositoryInstance
	 *
	 * Constraint:
	 *     (name=ID keyLink=URL repositoryPath=URL updateRosDep=URL?)
	 * </pre>
	 */
	protected void sequence_AptRepositoryInstance(ISerializationContext context, AptRepositoryInstance semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     BuildRequirements returns BuildRequirements
	 *
	 * Constraint:
	 *     (
	 *         ReqRosDistros=MultiValueList 
	 *         ReqTestRosDistros=MultiValueList? 
	 *         ReqBuildDependencies=ReqBuildDependencies? 
	 *         ReqDependencyRepositories=ReqDependencyRepositories? 
	 *         ReqCMakeArgs=MultiValueList?
	 *     )
	 * </pre>
	 */
	protected void sequence_BuildRequirements(ISerializationContext context, BuildRequirements semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     CIParameters returns CIParameters
	 *
	 * Constraint:
	 *     (type=ID parameters+=GroupedProperties+)
	 * </pre>
	 */
	protected void sequence_CIParameters(ISerializationContext context, CIParameters semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     CISetting returns CISetting
	 *
	 * Constraint:
	 *     (
	 *         type='CISetting:' 
	 *         name=QualifiedName 
	 *         ciTypes=MultiValueList 
	 *         appliedRepos=MultiMonolithicImplementationNameList 
	 *         reqBranchPrefix=ID 
	 *         ciParameters+=CIParameters*
	 *     )
	 * </pre>
	 */
	protected void sequence_CISetting(ISerializationContext context, CISetting semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     PropertyExpressType returns CommonPropertyMultiValue
	 *     CommonPropertyMultiValue returns CommonPropertyMultiValue
	 *
	 * Constraint:
	 *     (name=ID value=MultiValueList)
	 * </pre>
	 */
	protected void sequence_CommonPropertyMultiValue(ISerializationContext context, CommonPropertyMultiValue semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DeployModelPackage.Literals.PROPERTY_EXPRESS_TYPE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DeployModelPackage.Literals.PROPERTY_EXPRESS_TYPE__NAME));
			if (transientValues.isValueTransient(semanticObject, DeployModelPackage.Literals.COMMON_PROPERTY_MULTI_VALUE__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DeployModelPackage.Literals.COMMON_PROPERTY_MULTI_VALUE__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCommonPropertyMultiValueAccess().getNameIDTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getCommonPropertyMultiValueAccess().getValueMultiValueListParserRuleCall_5_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     PropertyExpressType returns CommonPropertySingleValue
	 *     CommonPropertySingleValue returns CommonPropertySingleValue
	 *
	 * Constraint:
	 *     (name=ID value=ValueTypes)
	 * </pre>
	 */
	protected void sequence_CommonPropertySingleValue(ISerializationContext context, CommonPropertySingleValue semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DeployModelPackage.Literals.PROPERTY_EXPRESS_TYPE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DeployModelPackage.Literals.PROPERTY_EXPRESS_TYPE__NAME));
			if (transientValues.isValueTransient(semanticObject, DeployModelPackage.Literals.COMMON_PROPERTY_SINGLE_VALUE__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DeployModelPackage.Literals.COMMON_PROPERTY_SINGLE_VALUE__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCommonPropertySingleValueAccess().getNameIDTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getCommonPropertySingleValueAccess().getValueValueTypesParserRuleCall_5_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     DeploymentRequirements returns DeploymentRequirements
	 *
	 * Constraint:
	 *     requirements+=PropertyExpressType+
	 * </pre>
	 */
	protected void sequence_DeploymentRequirements(ISerializationContext context, DeploymentRequirements semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     DependencyTypes returns GitPackage
	 *     GitPackage returns GitPackage
	 *
	 * Constraint:
	 *     (name=ID path=URL visibility=ID?)
	 * </pre>
	 */
	protected void sequence_GitPackage(ISerializationContext context, GitPackage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     GroupedProperties returns GroupedProperties
	 *
	 * Constraint:
	 *     (type=ID properties+=PropertyExpressType+)
	 * </pre>
	 */
	protected void sequence_GroupedProperties(ISerializationContext context, GroupedProperties semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ImageDescription returns ImageDescription
	 *
	 * Constraint:
	 *     (types=MultiValueList appiledImplementations=MultiMonolithicImplementationNameList imageTags=MultiValueList)
	 * </pre>
	 */
	protected void sequence_ImageDescription(ISerializationContext context, ImageDescription semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DeployModelPackage.Literals.IMAGE_DESCRIPTION__TYPES) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DeployModelPackage.Literals.IMAGE_DESCRIPTION__TYPES));
			if (transientValues.isValueTransient(semanticObject, DeployModelPackage.Literals.IMAGE_DESCRIPTION__APPILED_IMPLEMENTATIONS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DeployModelPackage.Literals.IMAGE_DESCRIPTION__APPILED_IMPLEMENTATIONS));
			if (transientValues.isValueTransient(semanticObject, DeployModelPackage.Literals.IMAGE_DESCRIPTION__IMAGE_TAGS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DeployModelPackage.Literals.IMAGE_DESCRIPTION__IMAGE_TAGS));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getImageDescriptionAccess().getTypesMultiValueListParserRuleCall_1_0(), semanticObject.getTypes());
		feeder.accept(grammarAccess.getImageDescriptionAccess().getAppiledImplementationsMultiMonolithicImplementationNameListParserRuleCall_3_0(), semanticObject.getAppiledImplementations());
		feeder.accept(grammarAccess.getImageDescriptionAccess().getImageTagsMultiValueListParserRuleCall_5_0(), semanticObject.getImageTags());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ImplementationArtifactAbstract returns ImplementationArtifactAbstract
	 *
	 * Constraint:
	 *     (importedNamespace=QualifiedName name=[MonolithicImplementationDescription|QualifiedName] startCommands=MultiValueList?)
	 * </pre>
	 */
	protected void sequence_ImplementationArtifactAbstract(ISerializationContext context, ImplementationArtifactAbstract semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ImplementationArtifactDescription returns ImplementationArtifactDescription
	 *
	 * Constraint:
	 *     (impl=NewImplementationArtifact | impl=ReuseImplementationArtifact)
	 * </pre>
	 */
	protected void sequence_ImplementationArtifactDescription(ISerializationContext context, ImplementationArtifactDescription semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     DependencyTypes returns LocalPackage
	 *     LocalPackage returns LocalPackage
	 *
	 * Constraint:
	 *     name=[MonolithicImplementationDescription|QualifiedName]
	 * </pre>
	 */
	protected void sequence_LocalPackage(ISerializationContext context, LocalPackage semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DeployModelPackage.Literals.LOCAL_PACKAGE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DeployModelPackage.Literals.LOCAL_PACKAGE__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getLocalPackageAccess().getNameMonolithicImplementationDescriptionQualifiedNameParserRuleCall_2_0_1(), semanticObject.eGet(DeployModelPackage.Literals.LOCAL_PACKAGE__NAME, false));
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     MonolithicImplementationDescription returns MonolithicImplementationDescription
	 *
	 * Constraint:
	 *     (
	 *         type='MonolithicImplementationDescription:' 
	 *         name=QualifiedName 
	 *         impRosmodel=STRING? 
	 *         description=STRING 
	 *         mode=ImplementationModeType 
	 *         branch=BranchType 
	 *         implementation=NewImplementationArtifact?
	 *     )
	 * </pre>
	 */
	protected void sequence_MonolithicImplementationDescription(ISerializationContext context, MonolithicImplementationDescription semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     MultiMonolithicImplementationNameList returns MultiMonolithicImplementationNameListBracket
	 *     MultiMonolithicImplementationNameListBracket returns MultiMonolithicImplementationNameListBracket
	 *
	 * Constraint:
	 *     (values+=[MonolithicImplementationDescription|QualifiedName] values+=[MonolithicImplementationDescription|QualifiedName]*)
	 * </pre>
	 */
	protected void sequence_MultiMonolithicImplementationNameListBracket(ISerializationContext context, MultiMonolithicImplementationNameListBracket semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     MultiMonolithicImplementationNameList returns MultiMonolithicImplementationNamePreList
	 *     MultiMonolithicImplementationNamePreList returns MultiMonolithicImplementationNamePreList
	 *
	 * Constraint:
	 *     values+=[MonolithicImplementationDescription|QualifiedName]*
	 * </pre>
	 */
	protected void sequence_MultiMonolithicImplementationNamePreList(ISerializationContext context, MultiMonolithicImplementationNamePreList semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     MultiValueList returns MultiValueListBracket
	 *     MultiValueListBracket returns MultiValueListBracket
	 *
	 * Constraint:
	 *     (values+=ValueTypes values+=ValueTypes*)
	 * </pre>
	 */
	protected void sequence_MultiValueListBracket(ISerializationContext context, MultiValueListBracket semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     MultiValueList returns MultiValueListPreList
	 *     MultiValueListPreList returns MultiValueListPreList
	 *
	 * Constraint:
	 *     values+=ValueTypes*
	 * </pre>
	 */
	protected void sequence_MultiValueListPreList(ISerializationContext context, MultiValueListPreList semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     NewImplementationArtifact returns NewImplementationArtifact
	 *
	 * Constraint:
	 *     (
	 *         (location=STRING | location=LOCALPATH | location=URL) 
	 *         deployRequirements=DeploymentRequirements 
	 *         resourceRequirements=ResourceRequirements? 
	 *         buildRequirements=BuildRequirements? 
	 *         startCommands=MultiValueList?
	 *     )
	 * </pre>
	 */
	protected void sequence_NewImplementationArtifact(ISerializationContext context, NewImplementationArtifact semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     PackageDescription returns PackageDescription
	 *
	 * Constraint:
	 *     (type='PackageDescription' name=QualifiedName imageDescription=ImageDescription repositoryDescription=RepositoryDescription)
	 * </pre>
	 */
	protected void sequence_PackageDescription(ISerializationContext context, PackageDescription semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DeployModelPackage.Literals.PACKAGE_DESCRIPTION__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DeployModelPackage.Literals.PACKAGE_DESCRIPTION__TYPE));
			if (transientValues.isValueTransient(semanticObject, DeployModelPackage.Literals.PACKAGE_DESCRIPTION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DeployModelPackage.Literals.PACKAGE_DESCRIPTION__NAME));
			if (transientValues.isValueTransient(semanticObject, DeployModelPackage.Literals.PACKAGE_DESCRIPTION__IMAGE_DESCRIPTION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DeployModelPackage.Literals.PACKAGE_DESCRIPTION__IMAGE_DESCRIPTION));
			if (transientValues.isValueTransient(semanticObject, DeployModelPackage.Literals.PACKAGE_DESCRIPTION__REPOSITORY_DESCRIPTION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DeployModelPackage.Literals.PACKAGE_DESCRIPTION__REPOSITORY_DESCRIPTION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPackageDescriptionAccess().getTypePackageDescriptionKeyword_0_0(), semanticObject.getType());
		feeder.accept(grammarAccess.getPackageDescriptionAccess().getNameQualifiedNameParserRuleCall_4_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getPackageDescriptionAccess().getImageDescriptionImageDescriptionParserRuleCall_7_0(), semanticObject.getImageDescription());
		feeder.accept(grammarAccess.getPackageDescriptionAccess().getRepositoryDescriptionRepositoryDescriptionParserRuleCall_10_0(), semanticObject.getRepositoryDescription());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     RepositoryDescription returns RepositoryDescription
	 *
	 * Constraint:
	 *     spec+=RepositorySpec+
	 * </pre>
	 */
	protected void sequence_RepositoryDescription(ISerializationContext context, RepositoryDescription semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     RepositorySpec returns RepositorySpec
	 *
	 * Constraint:
	 *     (name=ID repository=Repository)
	 * </pre>
	 */
	protected void sequence_RepositorySpec(ISerializationContext context, RepositorySpec semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DeployModelPackage.Literals.REPOSITORY_SPEC__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DeployModelPackage.Literals.REPOSITORY_SPEC__NAME));
			if (transientValues.isValueTransient(semanticObject, DeployModelPackage.Literals.REPOSITORY_SPEC__REPOSITORY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DeployModelPackage.Literals.REPOSITORY_SPEC__REPOSITORY));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRepositorySpecAccess().getNameIDTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getRepositorySpecAccess().getRepositoryRepositoryParserRuleCall_4_0(), semanticObject.getRepository());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Repository returns Repository
	 *
	 * Constraint:
	 *     (type=ID path=STRING?)
	 * </pre>
	 */
	protected void sequence_Repository(ISerializationContext context, Repository semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ReqBuildDependencies returns ReqBuildDependencies
	 *
	 * Constraint:
	 *     dependencies+=DependencyTypes*
	 * </pre>
	 */
	protected void sequence_ReqBuildDependencies(ISerializationContext context, ReqBuildDependencies semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ReqDependencyRepositories returns ReqDependencyRepositories
	 *
	 * Constraint:
	 *     children+=AptRepositoryInstance+
	 * </pre>
	 */
	protected void sequence_ReqDependencyRepositories(ISerializationContext context, ReqDependencyRepositories semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ResourceRequirements returns ResourceRequirements
	 *
	 * Constraint:
	 *     requirements+=PropertyExpressType+
	 * </pre>
	 */
	protected void sequence_ResourceRequirements(ISerializationContext context, ResourceRequirements semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ReuseImplementationArtifact returns ReuseImplementationArtifact
	 *
	 * Constraint:
	 *     lists+=ImplementationArtifactAbstract+
	 * </pre>
	 */
	protected void sequence_ReuseImplementationArtifact(ISerializationContext context, ReuseImplementationArtifact semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     StackImplementationDescription returns StackImplementationDescription
	 *
	 * Constraint:
	 *     (
	 *         type='StackImplementationDescription:' 
	 *         name=QualifiedName 
	 *         impRosmodel=QualifiedName? 
	 *         description=STRING 
	 *         mode=ImplementationModeType 
	 *         impl=ImplementationArtifactDescription
	 *     )
	 * </pre>
	 */
	protected void sequence_StackImplementationDescription(ISerializationContext context, StackImplementationDescription semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     YamlContent returns YamlContent
	 *
	 * Constraint:
	 *     (rootContent=MonolithicImplementationDescription | rootContent=StackImplementationDescription | rootContent=PackageDescription | rootContent=CISetting)
	 * </pre>
	 */
	protected void sequence_YamlContent(ISerializationContext context, YamlContent semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Yaml returns Yaml
	 *
	 * Constraint:
	 *     content+=YamlContent*
	 * </pre>
	 */
	protected void sequence_Yaml(ISerializationContext context, Yaml semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
